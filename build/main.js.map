{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// @ts-ignore: no TS definition\nimport { JVC } from './lib/JVC';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noOp = () => {\n};\n\nconst POWER = {\n    command: 'PW',\n    onAck: noOp,\n    onResponse: noOp\n};\n\nclass JvcDila extends utils.Adapter {\n    protected projector: JVC | undefined;\n    private interval: ioBroker.Interval | undefined;\n    private timeout: ioBroker.Timeout | undefined;\n    private apiConnected = false;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'jvc_dila',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        //this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.setState('info.connection', { val: false, ack: true });\n        this.apiConnected = false;\n        if (this.config.ip) {\n            this.projector = new JVC(this.log, this.config.ip, this.config.port);\n            this.addListeners();\n            this.connect();\n            this.subscribeStates('*');\n        } else {\n            this.log.warn('IP of projector is not configured. Please edit configuration!');\n        }\n    }\n\n    private onProjectorConnected() {\n        this.setState('info.connection', { val: true, ack: true });\n        this.apiConnected = true;\n        if (this.timeout) {\n            this.clearTimeout(this.timeout);\n            delete this.timeout;\n        }\n        this.log.debug('projector connected');\n    }\n\n    private onProjectorDisconnected() {\n        this.setState('info.connection', { val: false, ack: true });\n        this.apiConnected = false;\n        if (this.interval) this.clearInterval(this.interval);\n        this.timeout = this.setTimeout(() => {\n            this.connect();\n        }, this.config.reconnectTime);\n        this.log.debug('projector disconnected.');\n    }\n\n    private onProjectorError(e: any) {\n        switch (e.code) {\n            case 'ETIMEDOUT':\n            case 'ENETUNREACH':\n            case 'EHOSTUNREACH':\n            case 'ECONNREFUSED':\n                this.log.silly(`unable to connect to ${e.address}`);\n                break;\n            default:\n                this.log.error(`connection error ${e}`);\n                this.setState('info.connection', { val: false, ack: true });\n                this.apiConnected = false;\n                if (this.interval) this.clearInterval(this.interval);\n                if (this.timeout) this.clearTimeout(this.timeout);\n        }\n    }\n\n    private onProjectorReady() {\n        this.log.info('projector is ready');\n        this.interval = this.setInterval(this.updater.bind(this), 5000);\n    }\n\n    private onAck(state: string) {\n        this.log.silly(`ack for ${Buffer.from(state).toString('hex')} received`);\n    }\n\n    private onResponse(state: string, value: string) {\n        switch (state) {\n            case POWER.command:\n                this.setState('state', value, true);\n                if (value === '1' || value === '0') {\n                    this.setState('on', value === '1', true);\n                }\n                break;\n        }\n        this.log.silly(`response for ${state} received: ${value}`);\n    }\n\n    private onUnknown() {\n        this.log.error('unable to handle response from projector');\n    }\n\n    private addListeners() {\n        if (this.projector) {\n            this.projector.on('connected', this.onProjectorConnected.bind(this));\n            this.projector.on('disconnected', this.onProjectorDisconnected.bind(this));\n            this.projector.on('error', this.onProjectorError.bind(this));\n            this.projector.on('ready', this.onProjectorReady.bind(this));\n            this.projector.on('ack', this.onAck.bind(this));\n            this.projector.on('response', this.onResponse.bind(this));\n            this.projector.on('unknown', this.onUnknown.bind(this));\n        }\n    }\n\n    private connect(): void {\n        this.projector?.connect();\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.setState('info.connection', { val: false, ack: true });\n            this.apiConnected = false;\n            if (this.interval) this.clearInterval(this.interval);\n            if (this.timeout) this.clearTimeout(this.timeout);\n\n\n            if (this.projector) {\n                this.projector.disconnect();\n                this.projector.removeAllListeners();\n                delete this.projector;\n            }\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (id && state && !state.ack) {\n            const localId = this.removeNamespace(id);\n            if (this.apiConnected) {\n                // The state was changed\n                this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n                if (localId === 'on') {\n                    this.projector?.requestOperation(POWER.command, state.val === true ? '1' : '0');\n                }\n            } else {\n                this.log.error(`Unable to perform action for ${localId} - API is not connected (device not reachable?)`);\n            }\n\n        }\n    }\n\n    private updater() {\n        this.projector?.requestReference(POWER.command);\n    }\n\n    private removeNamespace(id: string) {\n        const re = new RegExp(this.namespace + '*\\\\.', 'g');\n        return id.replace(re, '');\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new JvcDila(options);\n} else {\n    // otherwise start the instance directly\n    (() => new JvcDila())();\n}"],
  "mappings": "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",
  "names": []
}
