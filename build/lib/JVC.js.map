{
  "version": 3,
  "sources": ["../../src/lib/JVC.ts"],
  "sourcesContent": ["import { EventEmitter } from 'events';\nimport net from 'net';\nimport { setInterval } from 'timers';\n\nexport class JVC extends EventEmitter {\n    readonly requestPrefix = Buffer.from([\n        0x3F, 0x89, 0x01,\n    ]);\n\n    readonly setPrefix = Buffer.from([\n        0x21, 0x89, 0x01,\n    ]);\n    readonly commandPostfix = Buffer.from([\n        0x0A,\n    ]);\n    private acked = false;\n    private socket: net.Socket | undefined;\n    private partial: Buffer | undefined;\n    private interval: NodeJS.Timeout | undefined;\n    private connectTimeout: NodeJS.Timeout | undefined;\n    private queue: Buffer[] = [];\n    private checking: number | undefined = undefined;\n\n    constructor(\n        private logger: ioBroker.Logger,\n        private ip: string,\n        private port: number,\n        private timeout: number = 5000) {\n        super();\n    }\n\n    public async requestReference(state: string): Promise<void> {\n        this.logger.silly(`request ${state}`);\n        this.queue.push(Buffer.concat([this.requestPrefix, Buffer.from(state), this.commandPostfix]));\n        await this.handleQueue();\n    }\n\n    public async requestOperation(operation: string, value?: string): Promise<void> {\n        if (value) this.queue.push(Buffer.concat([this.setPrefix, Buffer.from(operation), Buffer.from(value), this.commandPostfix]));\n        else this.queue.push(Buffer.concat([this.setPrefix, Buffer.from(operation), this.commandPostfix]));\n        await this.handleQueue();\n    }\n\n    async connect(): Promise<void> {\n        this.logger.debug('Try to connect to JVC projector');\n        this.socket = new net.Socket();\n        this.socket\n            .on('error', (e) => {\n                clearTimeout(this.connectTimeout);\n                this.emit('error', e);\n            })\n            .on('connect', () => {\n                clearTimeout(this.connectTimeout);\n                this.emit('connected');\n            })\n            .on('close', () => {\n                clearTimeout(this.connectTimeout);\n                this.disconnect();\n                this.emit('disconnected');\n            }).on('timeout', () => {\n                this.disconnect();\n            })\n            .on('data', this.received.bind(this))\n            .connect({\n                host: this.ip,\n                port: this.port || 20554,\n            });\n\n        this.connectTimeout = setTimeout(() => {\n            if (this.socket?.connecting) {\n                this.socket?.destroy();\n            }\n        }, this.timeout)\n    }\n\n    disconnect(): void {\n        this.acked = false;\n        this.checking = undefined;\n        clearInterval(this.interval);\n        clearTimeout(this.connectTimeout);\n        this.socket?.destroy();\n        this.socket?.removeAllListeners();\n        delete this.socket;\n    }\n\n    private received(d: Buffer): void {\n        if (d.length === 0) {\n            return;\n        }\n        this.logger.silly('received ' + d.toString('hex'));\n        if (!this.acked) {\n            const str = d.toString('utf8');\n            debugger;\n            if (str.startsWith('PJ_OK')) {\n                this.logger.silly('received PJ_OK');\n                this.socket?.write(Buffer.from('PJREQ'));\n            } else if (str.startsWith('PJACK')) {\n                this.acked = true;\n                this.checking = undefined;\n                this.emit('ready');\n                this.interval = setInterval(this.checkWorking.bind(this), 1000);\n            } else if (str.startsWith('PJNAK')) {\n                this.logger.silly('Received NAK');\n            }\n            if (d.length > 5) {\n                this.received(d.slice(5));\n            }\n        } else {\n            const fullMessage = this.partial ? Buffer.concat([this.partial, d]) : d;\n            delete this.partial;\n            const endOf = fullMessage.indexOf(0x0A);\n            if (endOf < 0) {\n                this.logger.silly(`Partial message received: ${fullMessage.toString('hex')}`);\n                this.partial = fullMessage;\n            } else {\n                const thisMessage = fullMessage.slice(0, endOf);\n                this.messageReceived(thisMessage);\n                if (endOf < fullMessage.length) {\n                    this.received(fullMessage.slice(endOf + 1));\n                }\n            }\n        }\n    }\n\n    private async write(d: Buffer): Promise<void> {\n        if (!this.socket) {\n            await this.connect();\n        }\n        this.logger.silly(`sending ${d.toString('hex')}`);\n        this.socket?.write(d);\n    }\n\n    private messageReceived(message: Buffer): void {\n        const header = message[0];\n        if (header === 0x06) {\n            const operation = message.slice(3, 5).toString();\n            this.emit('ack', operation, message.slice(5).toString());\n            this.checking = undefined;\n            this.handleQueue();\n        } else if (header === 0x40) {\n            this.emit('response', message.slice(3, 5).toString(), message.slice(5).toString());\n        } else {\n            this.logger.error('Failed to parse packet');\n            this.emit('unknown', message);\n        }\n    }\n\n    private async checkWorking() {\n        if (!this.checking) {\n            this.checking = Date.now();\n        } else if (this.checking + this.timeout > Date.now()) {\n            this.socket?.destroy();\n            return;\n        }\n        await this.write(Buffer.concat([this.setPrefix, Buffer.from([0x00, 0x00]), this.commandPostfix]));\n    }\n\n    private async handleQueue() {\n        if (this.queue.length > 0 && !this.checking) {\n            const next = this.queue.pop();\n            this.logger.silly(`queue ${this.queue.length}`);\n            if (next) await this.write(next);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["net"]
}
